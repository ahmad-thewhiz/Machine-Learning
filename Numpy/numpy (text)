import numpy as np
import sklearn

# Create a NumPy array
myarr = np.array([[3, 6, 32, 7]], np.int8)

# Access an element in the array
myarr[0, 2]

# Get the shape of the array
myarr.shape

# Get the data type of the array
myarr.dtype

# Modify an element in the array
myarr[0, 1] = 4

# Print the modified array
myarr

# Array creation: Conversion from other Python Structures

# Create a NumPy array from a list
listarr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Print the array
listarr

# Get the data type of the array
listarr.dtype

# Get the shape of the array
listarr.shape

# Get the shape of the array again
listarr.shape

# Create a NumPy array from a set
np.array({34, 23, 23})

# Create an array of zeros
zeros = np.zeros((2, 5))

# Print the array of zeros
zeros

# Get the data type of the array
zeros.dtype

# Get the shape of the array
zeros.shape

# Create a NumPy array with a range of values
rng = np.arange(15)

# Print the array
rng

# Create a NumPy array with evenly spaced values
lspace = np.linspace(1, 50, 10)

# Print the array
lspace

# Create an empty array
emp = np.empty((4, 6))

# Print the array
emp

# Create an empty array with the same shape as 'lspace'
emp_like = np.empty_like(lspace)

# Print the array
emp_like

# Create an identity matrix
ide = np.identity(45)

# Print the identity matrix
ide

# Get the shape of the identity matrix
ide.shape

# Create an array with a range of values
arr = np.arange(99)

# Print the array
arr

# Reshape the array into a 3x33 matrix
arr.reshape(3, 33)

# Print the array (after reshaping)
arr

# Reshape the array again
arr = arr.reshape(3, 33)

# Print the array (after reshaping)
arr

# Flatten the array
arr.ravel()

# Create a Python list
a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Convert the list to a NumPy array
ar = np.array(a)

# Print the array
ar

# Sum of elements along the 0-axis (columns)
ar.sum(axis=0)

# Sum of elements along the 1-axis (rows)
ar.sum(axis=1)

# Transpose the array
ar.T

# Get a flat iterator for the array
ar.flat

# Iterate over the elements in the array
for item in ar.flat:
    print(item)

# Get the number of dimensions of the array
ar.ndim

# Get the number of elements in the array
ar.size

# Get the number of bytes used by the array
ar.nbytes

# Create an array with random values
one = np.array([11, 2, 564, 6, 7])

# Get the index of the maximum value
one.argmax()

# Get the index of the minimum value
one.argmin()

# Get the indices that would sort the array
one.argsort()

# Print the array
ar

# Get the indices that would sort the array along the 0-axis
ar.argsort()

# Create a 2D array
rarr = np.array([[32, 34, 12], [23, 45, 34], [545, 674, 23]])

# Print the array
rarr

# Get the index of the minimum value
rarr.argmin()

# Get the index of the maximum value
rarr.argmax()

# Get the indices of the maximum values along the 0-axis
rarr.argmax(axis=0)

# Get the indices of the maximum values along the 1-axis
rarr.argmax(axis=1)

# Sort the array
rarr.sort()

# Print the sorted array
rarr

# Get the indices that would sort the array along the 1-axis
rarr.argsort(axis=1)

# Get the indices that would sort the array along the 0-axis
rarr.argsort(axis=0)

# Flatten the array
rarr.ravel()

# Reshape the array into a column vector
rarr.reshape(9, 1)

# Create another array
rarr2 = np.array([[1, 4, 1], [4, 0, 6], [5, 7, 2]])

# Perform element-wise addition of two arrays
rarr + rarr2

# Perform element-wise multiplication of two arrays
rarr * rarr2

# Compute the square root of the array
np.sqrt(rarr2)

# Compute the sum of all elements in the array
rarr2.sum()

# Find the minimum value in the array
rarr2.min()

# Find the maximum value in the array
rarr2.max()

# Compute the mean of the array
rarr2.mean()

# Find the indices where the values are greater than 5
np.where(rarr2 > 5)

# Get the data type of the result of np.where()
type(np.where(rarr2 > 5))

# Count the number of nonzero elements in the array
np.count_nonzero(rarr2)

# Get the indices of nonzero elements in the array
np.nonzero(rarr2)

# Check if all elements in the array are nonzero
np.all(rarr2)

# Set an element in the array to 0
rarr2[1, 2] = 0

# Get the indices of nonzero elements in the modified array
np.nonzero(rarr2)

import sys

# Create a Python list
py_ar = [0, 4, 55, 2]

# Convert the list to a NumPy array
np_ar = np.array(py_ar)

# Compute the size difference between a normal array and a NumPy array
sys.getsizeof(1) * len(py_ar)

# Compute the size of the NumPy array
np_ar.itemsize * np_ar.size
